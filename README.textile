h1. DEVISE / FACEBOOK CONNECTABLE

_Devise << Facebook Connect_

h2. What is Devise?

"http://github.com/plataformatec/devise":http://github.com/plataformatec/devise

h2. What is Devise Facebook Connect?

*Simple:* A very straightforward Facebook Connect authentication/linking with the ease of *"Devise":http://github.com/plataformatec/devise* and power of *"Facebooker":http://github.com/mmangino/facebooker*. If I may say it myself: The easiest way to get a Rails app authorized and connected with *"Facebook Connect":http://wiki.developers.facebook.com/index.php/Facebook_Connect*. Authentication in Rails should be straightforward, right? Let's build awesome web-apps instead of re-inventing the authentication!

h2. Dependencies

You'll need:

* "devise":http://github.com/plataformatec/devise for authentication.
* "facebooker":http://github.com/mmangino/facebooker for Facebook API integration.

h2. Installation

*Gem*

<pre>
  $ sudo gem install devise_facebook_connectable
</pre>

...and in @config/environment.rb@:

<pre>
  config.gem 'devise_facebook_connectable'
</pre>

*Dependencies*

Note: Should be installed automatically with the gem.

<pre>
  $ sudo gem install devise facebooker
</pre>

...and in @config/environment.rb@:

<pre>
  config.gem 'devise'
  config.gem 'facebooker'
</pre>

h2. Setup

*Devise: Setup*

...if you haven't done this already.

<pre>
  $ ./script/generate devise_install
</pre>

See "Devise":http://github.com/grimen/devise documentation for more info on available generators to get started smoothly.

*Facebook Connectable + Facebooker: Setup*

Installs the Facebooker stuff + required Facebook Connect javascript helpers...

<pre>
  $ ./script/generate devise_facebook_connectable --api API_KEY --secret SECRET_KEY
    dependency  xd_receiver
        create    public/xd_receiver.html
        create    public/xd_receiver_ssl.html
        create  config/facebooker.yml
        create  public/javascripts/devise.facebook_connectable.js
</pre>

Note: The @--api@ and @--secret@ arguments only makes sense if you already got Facebook application details ready; can be configured later (see *Configuration*).

*Facebook Connectable: Migration*

<pre>
  create_table :users do
    t.facebook_connectable
    
    # Optional: Additional module migration helpers here.
  end
</pre>

...and indexes (optional):

<pre>
  add_index :users, :facebook_uid, :unique => true
</pre>

...and then don't forget: @$ rake db:migrate@.

*Facebook Connectable: Model*

<pre>
  class User < ActiveRecord::Base
    devise :facebook_connectable
    
    # Optional: Additional modules here.
  end
</pre>

h2. Configuration

*Create a Facebook app*

..if you haven't already:

*"Create Facebook Application":http://facebook.com/developers/createapp.php*

...with settings:

Application settings > Connect > Facebook Connect Settings > Connect URL: @http://localhost:3000@ (for testing purposes)
Application settings > Advanced > Advanced Settings > Sandbox Mode: @Enabled@

...and for next step, copy-paste: @API Key@ and @Application Secret@

*@config/facebooker.yml@*

...should look something like this:

<pre>
  # ...
  defaults: &defaults
    api_key: YOUR_APP_API_KEY
    secret_key: YOUR_APP_SECRET_KEY
  # ...
</pre>

Note: For Facebook Connect only @api_key@, @secret_key@, and @Connect URL@ (configured in Facebook Application settings manager) are required.

*I18n*

Connect/login/logout link labels, and Flash error messages can be set using I18n:

<pre>
  en:
    devise:
      sessions:
        facebook_invalid: "Could not sign in. Invalid account."
        facebook_session_expired: "Could not sign in. Facebook Connect session expired."
        facebook_login: "Sign in"
        facebook_logout: "Sign out"
</pre>

Note: The usage of @:facebook_login@/@:facebook_login@ depends on configration, e.g. not used for the traditional and default Facebook Connect button.

h2. Usage

In @app/views/layouts/application.html.*@, something like:

<pre>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
           "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  
  <!-- Required: Include Facebook XMLNS (XML nammespace). See Facebooker - or Facebook API - documentation. -->
  <html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://www.facebook.com/2008/fbml">
    <head>
      <title><%= "Devise << Facebook Connect") %></title>
      
      <%= stylesheet_link_tag 'application' %>
      
      <!-- Required: Include Facebook Javascript (with current locale). See Facebooker documentation. -->
      <%= fb_connect_javascript_tag(:lang => ::I18n.locale) %>
      
      <!-- Required: Include devise_facebook_connectable Javascripts -->
      <%= javascript_include_tag :defaults, 'devise.facebook_connectable' %>
    </head>
    <body>
      <!-- Required: Init Facebook Javascript (using jQuery). See Facebooker documentation. -->
      <%= init_fb_connect :XFBML, :js => :jquery %>
      
      <div id="container">
        <%- flash.each do |name, msg| -%>
          <%= content_tag :div, msg, :id => "flash_#{name}" %>
        <%- end -%>
        
        <p><%= link_to 'Home', root_path %></p>
        
        <% if user_signed_in? -%>
          <div id="user_login_box" style="float:right">
            <%= current_user.email %> |
            <%= link_to 'My info', edit_user_path %> |
          </div>
        <% end -%>
        <div style="clear:both"></div>
        
        <%- if show_title? -%>
          <h1><%=h yield(:title) %></h1>
        <%- end -%>
        
        <%= yield %>
      </div>
    </body>
  </html>
</pre>

*View:*

...add the connect/login/logout link somewhere:

<pre>
  <%= facebook_link :for => :user %>
</pre>

*Model:*

...if you want to fetch and store any data from Facebook upon connect (account creation):

<pre>
  class User < ActiveRecord::Base
    devise :facebook_connectable
    
    # Optional: Additional modules here.
    
    # Populate user info upon creation.
    #
    def before_facebook_connect(fb_session)
      # Just fetch what we really need from Facebook...
      fb_session.user.populate(:locale, :current_location, :username, :name, :first_name, :last_name, 
                                :birthday_date, :sex, :city, :state, :country)
                                
      self.locale             = my_fancy_locale_parser(fb_session.user.locale)
      self.time_zone          = fb_session.user.current_location.try(:city)
      self.country            = fb_session.user.current_location.try(:country)
      
      self.username           = fb_session.user.username
      
      self.profile.real_name  = fb_session.user.name
      self.profile.first_name = fb_session.user.first_name
      self.profile.last_name  = fb_session.user.last_name
      self.profile.birthdate  = fb_session.user.birthday_date.try(:to_date)
      self.profile.gender     = my_fancy_gender_parser(fb_session.user.sex)
      
      self.profile.city       = fb_session.user.hometown_location.try(:city)
      self.profile.zip_code   = fb_session.user.hometown_location.try(:state)
      self.profile.country    = fb_session.user.hometown_location.try(:country)
      
      # etc...
    end
    
  end
</pre>

*DONE!*

<pre>
  $ ./script/server
</pre>

*Note:* If you experience any issues with connecting and/or signing in/out now, then I simply must have forgot something in these instructions. Please file a GitHub-issue in such case! =)

h2. Example:

Checkout my little *"live example":http://devise-facebook-connectable.heroku.com*.

h2. Advanced Configuration

In initializer @config/initializers/devise.rb@:

<pre>
  Devise.setup do |config|
    # ...
    config.facebook_uid_field = :facebook_uid
    config.facebook_session_key_field = :facebook_session_key
    config.facebook_auto_create_account = false
    # ...
  end
</pre>

h2. Documentation (RDoc)

"Rdoc.info/devise_facebook_connectable":http://rdoc.info/projects/grimen/devise_facebook_connectable

h2. Important

Stuff that you need to be aware of:

* Just to be clear: You need to use the @devise_facebook_connect@-helpers to login/logout, otherwise it won't work.
* If you login a resource using Facebook Connect (with this extension), you need to logout using the the Facebook Connect logout helpers available. If not you will end up being logged into Facebook but not to the account, and vice-versa. Messy. Would be cool with some kind of polling script that logs the user out of Facebook if the account is signed out - but not really needed now; just a bit of common sense and use the helpers and this will not be an issue.
* For *Ruby 1.9* support you'll need to install Rails 2.3.5 which contains a required Ruby 1.9 patch in ActiveSupport for time-attack-safe string comparisons that Facebooker uses in its session management helpers. Otherwise than that I haven't got any Ruby 1.9-related issues so far.

h2. References

*Examples:*

* "Facebooker Showcase":http://facebooker.pjkh.com - not using Devise, but same-same.

*Documentation:*

* "Facebooker RDoc":http://facebooker.rubyforge.org
* "Facebook Connect Home":http://wiki.developers.facebook.com/index.php/Facebook_Connect
* "Facebook Connect Wiki":http://wiki.developers.facebook.com/index.php/Connect/Authorization_Websites
* "Facebook Connect Javascript SDK":http://developers.facebook.com/docs/?u=facebook.jslib.FB.Connect

*Repos:*

* "Facebook Connect Javascript client":http://github.com/facebook/connect-js

*Similar projects:*

* "authlogic_facebook_connect":http://github.com/kalasjocke/authlogic_facebook_connect - Facebook Connect for "Authlogic":http://github.com/binarylogic/authlogic by "Joakim Ekberg":http://github.com/kalasjocke
* "authlogic_facebook":http://github.com/GICodeWarrior/authlogic_facebook Facebook Connect for "Authlogic":http://github.com/binarylogic/authlogic by "Rusty Burchfield":http://github.com/GICodeWarrior

h2. TODO / Known Issues

Priority:

* *Ensure no clashes* with Devise core modules is a design goal, but have only tested @Tracking@ so far for no reason.
* *Disconnect link helper* would makes sense, i.e. disconnect a Facebook account from the app/site (a.k.a. delete the account Facebook Connect style).
* *Specs/Features* would be great. Skipped tests so far as I built this using experimenting as I wasn't sure how Devise and Warden was working - trial-n-error style. Don't have a clue how to spec Facebook Connect stuff though. Would appreciate any help on this.
* *Expired sessions* aka @Facebooker::Session::SessionExpired@ appears less now after some controller filter hacks - but needs thorough testing.

Maybe:

* *Facebook Connect view generator* maybe?
* *Make Facebooker optional* - a more slimmed implementation if Facebooker feels to heavy.

h2. License

Released under the MIT license.<br />
Copyright (c) 2009 "Jonas Grimfelt":http://github.com/grimen
